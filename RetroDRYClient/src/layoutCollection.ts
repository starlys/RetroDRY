import { PanelLayout, GridLayout } from "./layouts"; 
import Session from "./session";

//container for registered card/grid layouts
export default class LayoutCollection {
    private session: Session;

    //cardLayouts and gridLayouts are indexed by "datonName|tableName|businessContext"
    private cardLayouts: {[name: string]: PanelLayout} = {};
    private gridLayouts: {[name: string]: GridLayout} = {};

    constructor(session: Session) {
        this.session = session;
    }

    //register card layout to use with the given daton and table
    registerCard(datonName: string, tableName: string, businessContext: string, layout: PanelLayout) {
        const key = this.getKey(datonName, tableName, businessContext);
        this.cardLayouts[key] = layout;
    }

    //register default grid layout to use with the given daton and table
    registerGrid(datonName: string, tableName: string, businessContext: string, layout: GridLayout) {
        const key = this.getKey(datonName, tableName, businessContext);
        this.gridLayouts[key] = layout;
    }

    //get the registered or autogenerated card layout for the given daton type and table; falls back to default context if not found
    getCard(datonName: string, tableName: string, businessContext: string): PanelLayout {
        const key = this.getKey(datonName, tableName, businessContext);
        let layout = this.cardLayouts[key];
        if (!layout && businessContext) layout = this.getCard(datonName, tableName, ''); //recursive!
        if (!layout) {
            const tableDef = this.session.getTableDef(datonName, tableName);
            if (tableDef) layout = PanelLayout.autoGenerate(tableDef);
            this.cardLayouts[key] = layout;
        }
        return layout;
    }

    //get the registered or autogenerated grid layout for the given daton type and table; falls back to default context if not found
    getGrid(datonName: string, tableName: string, businessContext: string): GridLayout {
        const key = this.getKey(datonName, tableName, businessContext);
        let layout = this.gridLayouts[key];
        if (!layout && businessContext) layout = this.getGrid(datonName, tableName, ''); //recursive!
        if (!layout) {
            const tableDef = this.session.getTableDef(datonName, tableName);
            if (tableDef) layout = GridLayout.autoGenerate(tableDef);
            this.gridLayouts[key] = layout;
        }
        return layout;
    }

    private getKey(datonName: string, tableName: string, businessContext: string) {
        return datonName + '|' + tableName + '|' + businessContext;
    }
}