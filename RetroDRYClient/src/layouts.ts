import { TableDefResponse } from "./wireTypes";

export abstract class BaseLayout {
    isAutoGenerated?: boolean;

    //string assigned by host app to identify the business process, used in layout selection; use '' for default
    businessContext?: string;
}

//layout for a card
export class PanelLayout extends BaseLayout {
    //optional label for the group of inputs
    label?: string;

    //true to include visual border on group
    border?: boolean = false;
    
    //true to layout as horizontal flow; false or omitted for vertical
    horizontal?: boolean = false;

    //css class names to add to panel
    classNames?: string;

    //each element is one of: 
    //(1) A nested panel; 
    //(2) A string column name - or it can be a series of space-separated names which causes the first to include the prompt and the others
    //to appear in compact form after it. Each column name can have the width appended in ems. For example:
    //'firstName:15 lastName:20';
    //(3) A function that returns JSX element to include in the layout; this injected function takes arguments (row|criset, edit:boolean, layer)
    content?: (string|PanelLayout|Function)[];

    static autoGenerate(tabledef: TableDefResponse): PanelLayout {
        const panel = new PanelLayout();
        panel.content = tabledef.cols.map(c => c.name);
        panel.isAutoGenerated = true;
        return panel;
    }
}

//layout for a grid
export class GridLayout extends BaseLayout {
    columns: GridColumnLayout[] = [];

    static autoGenerate(tabledef: TableDefResponse): GridLayout {
        const grid = new GridLayout();
        grid.columns = tabledef.cols.map(c => new GridColumnLayout(c.name));
        grid.isAutoGenerated = true;
        return grid;
    }
}

export class GridColumnLayout {
    //width in ems
    width: number = 10;

    //column name
    name?: string;

    constructor(name: string) {
        this.name = name;
    }
}